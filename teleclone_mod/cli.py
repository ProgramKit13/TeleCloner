#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI wrapper para o Teleclone Mod, com suporte a checkpoint para retomar encaminhamento.
"""
import asyncio
import sys
import json
from pathlib import Path
from datetime import datetime
from telethon import TelegramClient
from telethon.tl.types import Channel, Chat
from telethon.tl.functions.channels import GetForumTopicsRequest

from teleclone_mod import core, forwarding as fw, users as us
from teleclone_mod.core import load_creds

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Checkpoint CLI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CKPT_FILE = Path("cli_checkpoint.json")

def load_cli_checkpoint() -> dict:
    if CKPT_FILE.exists():
        return json.loads(CKPT_FILE.read_text(encoding="utf-8"))
    return {}

def save_cli_checkpoint(data: dict):
    CKPT_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

def get_checkpoint(src_id: int, topic_id: int) -> int:
    data = load_cli_checkpoint()
    return data.get(str(src_id), {}).get(str(topic_id), 0)

def update_checkpoint(src_id: int, topic_id: int, message_id: int):
    data = load_cli_checkpoint()
    grp = data.setdefault(str(src_id), {})
    grp[str(topic_id)] = message_id
    save_cli_checkpoint(data)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Credenciais ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
api_id, api_hash, session_name = load_creds()
client = TelegramClient(session_name, api_id, api_hash)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helpers CLI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _list_dialogs(client):
    dialogs = [
        d for d in await client.get_dialogs(limit=None)
        if d.is_group or d.is_channel
    ]
    linhas = [f"[{i}] - {d.entity.title}" for i, d in enumerate(dialogs)]
    print("\n=== Chats dispon√≠veis ===")
    core._print_columns(linhas)
    print()
    return dialogs

async def _choose_dialog(client, papel):
    dialogs = await _list_dialogs(client)
    try:
        idx = int(input(f"√çndice do {papel}: "))
        ent = dialogs[idx].entity
    except (ValueError, IndexError):
        print("‚ùå √çndice inv√°lido.")
        return None, None

    topic_id = 0 # Adicionado para garantir que o default √© "Geral" (0)
    if getattr(ent, "forum", False):
        topics_res = await client(GetForumTopicsRequest(
            channel      = ent,
            offset_date  = datetime.utcfromtimestamp(0),
            offset_id    = 0,
            offset_topic = 0,
            limit        = 100
        ))
        if topics_res.topics:
            print("\n--- T√≥picos ---")
            # Adicionado o t√≥pico Geral (√≠ndice 0) na lista para o usu√°rio
            print(f"{0:>3}: Geral")
            for j, t in enumerate(topics_res.topics, start=1):
                print(f"{j:>3}: {t.title}")
            opt = input("√çndice do t√≥pico (vazio = todo grupo): ").strip()
            if opt:
                try:
                    # Ajustado para usar o √≠ndice 0-based da lista do usu√°rio
                    opt_idx = int(opt)
                    if opt_idx == 0:
                        topic_id = 0 # T√≥pico Geral
                    else:
                        topic_id = topics_res.topics[opt_idx - 1].id
                except (ValueError, IndexError):
                    print("‚ùå √çndice inv√°lido. Usando t√≥pico Geral.")
                    topic_id = 0
    return ent, topic_id

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Menu principal ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    await client.start()
    try:
        while True:
            BANNER = r"""
                   .--------.
                  / .------. \
                 / /        \ \
                 | |  ____  | |
                _| |_/ __ \_| |_
              .' |_   
              '._____ ____ _____.'
              |     .'____'.     |
              '.__.'.'    '.'.__.'
              '.__  | LOCK |  __.'
              |   '.'.____.'.'   |
              '.____'.____.'____.'
              '.________________.'

                       G R O U P  -  S T E A L E R 
                               !!BY XN30N!!
            """.lstrip("\n")
            print(BANNER)
            print("‚úÖ Conectado!\n")
            print(
                "\n1-Encaminhar hist√≥rico"
                "\n2-Espelhar em tempo-real"
                "\n3-Migrar usu√°rios"
                "\n4-Outras opcoes"
                "\n0-Sair"
            )
            op = input("Escolha: ").strip()

            if op == "1":  # ‚îÄ‚îÄ CLONAR HIST√ìRICO ‚îÄ‚îÄ
                src, th_src = await _choose_dialog(client, "ORIGEM")
                if not src: continue
                # Altera√ß√£o: Salvamos o t√≥pico de destino em uma nova vari√°vel
                dst, dst_tid = await _choose_dialog(client, "DESTINO")
                if not dst: continue
                strip = input("‚ùì Remover legendas das m√≠dias? (s/N): ").lower().startswith('s')

                # Exibe at√© onde j√° foi encaminhado
                last_id = get_checkpoint(src.id, th_src)
                if last_id:
                    print(f"üîÑ Voc√™ j√° encaminhou at√© a mensagem ID {last_id}.")
                    if input("   Limpar esse ponto e recome√ßar do in√≠cio? (s/N): ").lower().startswith("s"):
                        # limpa o checkpoint CLI
                        data = load_cli_checkpoint()
                        data.get(str(src.id), {}).pop(str(th_src), None)
                        save_cli_checkpoint(data)

                # ‚Üí Adicionado o dst_topic_id aqui para encaminhar para o t√≥pico correto
                await fw.forward_history(
                    client, src, dst,
                    topic_id=th_src,
                    dst_topic_id=dst_tid, # Altera√ß√£o: Adicionado o t√≥pico de destino
                    strip_caption=strip,
                    on_forward=lambda mid: update_checkpoint(src.id, th_src, mid)
                )

            elif op == "2":  # ‚îÄ‚îÄ ESPELHAR VIVO ‚îÄ‚îÄ
                src, th_src = await _choose_dialog(client, "ORIGEM")
                if not src: continue
                # Altera√ß√£o: Salvamos o t√≥pico de destino em uma nova vari√°vel
                dst, dst_tid = await _choose_dialog(client, "DESTINO")
                if not dst: continue
                strip = input("‚ùì Remover legendas ao espelhar? (s/N): ").lower().startswith('s')
                # Altera√ß√£o: Adicionado o dst_topic_id aqui para espelhar para o t√≥pico correto
                fw.live_mirror(client, src, dst,
                               topic_id=th_src,
                               dst_topic_id=dst_tid, # Altera√ß√£o: Adicionado o t√≥pico de destino
                               strip_caption=strip)
                print("üîÑ Espelhando‚Ä¶ CTRL+C p/ parar.")
                await client.run_until_disconnected()

            elif op == "3":  # ‚îÄ‚îÄ MIGRAR USU√ÅRIOS ‚îÄ‚îÄ
                src, _ = await _choose_dialog(client, "ORIGEM")
                if not src: continue
                dst, _ = await _choose_dialog(client, "DESTINO")
                if not dst: continue
                await us.copy_users(client, src, dst)

            elif op == "4":  # ‚îÄ‚îÄ APP ORIGINAL ‚îÄ‚îÄ
                await core.main(client)

            elif op == "0":
                break

            else:
                print("Op√ß√£o inv√°lida.")

    finally:
        await client.disconnect()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, EOFError):
        print("\n‚ö†Ô∏è  Interrompido pelo usu√°rio.")
    except Exception as e:
        print("\n‚ùå Erro inesperado:")
        import traceback; traceback.print_exception(e, file=sys.stdout)
